(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> int() argument must be a string or a number, not 'NoneType'"
p3
sS'layer'
p4
S'/home/calvin/web2py/applications/GetMeRide/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\n#########################################################################\n##   add_routes() function allows Admin to add new routes\n#########################################################################\n\nimport networkx as nx\n@auth.requires_login()\ndef add_routes():\n    form_add_route=SQLFORM.factory(Field(\'source_pt\',requires=IS_NOT_EMPTY()),\n                                   Field(\'destination_pt\',requires=IS_NOT_EMPTY()),\n                                   Field(\'distance_between\',\'double\',requires=IS_NOT_EMPTY()),\n                                   Field(\'traffic\',\'double\',requires=IS_NOT_EMPTY()))\n    if form_add_route.process().accepted:\n        ip_source_pt=form_add_route.vars.source_pt\n        ip_destination_pt=form_add_route.vars.destination_pt\n        ip_dist_btw=form_add_route.vars.distance_between\n        ip_traffic=form_add_route.vars.traffic\n        id1=db.routes.insert(source_pt=ip_source_pt,\n                             destination_pt=ip_destination_pt,\n                             dist_btw=ip_dist_btw,\n                             traffic=ip_traffic)\n    return locals()\n\n#####################################################################\n## share_a_cab() function allows a user to post details of cab to be shared\n#####################################################################\n@auth.requires_login()\ndef share_a_cab():\n    rows=db().select(db.routes.ALL)\n    g=nx.Graph()\n    for row in rows:\n        a=str(row.source_pt)\n        b=str(row.destination_pt)\n        c=float(row.dist_btw)\n        g.add_edge(a,b,weight=c)\n        \n    form_share_a_cab=SQLFORM.factory(Field(\'source_pt\',requires=IS_NOT_EMPTY()),\n                                     Field(\'destination_pt\',requires=IS_NOT_EMPTY()),\n                                     Field(\'date_of_travel\',\'date\',requires=IS_NOT_EMPTY()),\n                                     Field(\'time_of_travel\',\'time\',requires=IS_NOT_EMPTY()),\n                                     Field(\'type_of_car\',requires=IS_IN_SET([\'Sedan\', \'Hatchback\',\'SUV\'])),\n                                     Field(\'seats_available\',\'integer\',\n                                           requires=IS_IN_SET([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])),\n                                     Field(\'preference\',requires=IS_IN_SET([\'Male\', \'Female\'])))\n    \n    if form_share_a_cab.process().accepted:\n        ip_user_id=auth.user.email\n        ip_source_pt=form_share_a_cab.vars.source_pt\n        ip_destination_pt=form_share_a_cab.vars.destination_pt\n        ip_date_of_travel=form_share_a_cab.vars.date_of_travel\n        ip_time_of_travel=form_share_a_cab.vars.time_of_travel\n        ip_type_of_car=form_share_a_cab.vars.type_of_car\n        ip_seats_available=form_share_a_cab.vars.seats_available\n        ip_preference=form_share_a_cab.vars.preference\n#         user_id=\n        ip_shortest_path_btw=nx.shortest_path(g,ip_source_pt,ip_destination_pt,weight=\'weight\')\n        id1=db.share_cab_details.insert(user_id=ip_user_id,\n                                        source_pt=ip_source_pt,\n                                        destination_pt=ip_destination_pt,\n                                        date_of_travel=ip_date_of_travel,\n                                        time_of_travel=ip_time_of_travel,\n                                        path_btw=ip_shortest_path_btw,type_of_car=ip_type_of_car,\n                                        seats_available=ip_seats_available,preference=ip_preference)\n    return locals()\n##############################################################################################################\n## \n##############################################################################################################\n@auth.requires_login()\ndef search_cab():\n    form_search_cab=SQLFORM.factory( Field(\'source_pt\',requires=IS_NOT_EMPTY()),\n                                     Field(\'destination_pt\',requires=IS_NOT_EMPTY()),\n                                     Field(\'seats_required\',\'integer\',\n                                           requires=IS_IN_SET([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])),\n                                     Field(\'date_of_travel\',\'date\',requires=IS_NOT_EMPTY()))\n#                                      Field(\'time_of_travel\',\'time\',requires=IS_NOT_EMPTY()))\n    if form_search_cab.process().accepted:\n        redirect(URL(\'search_cab_details\',vars={\'source_pt\':form_search_cab.vars.source_pt,\n                                               \'destination_pt\':form_search_cab.vars.destination_pt,\n                                               \'seats_required\':form_search_cab.vars.seats_required,\n                                               \'date_of_travel\':form_search_cab.vars.date_of_travel}))\n#                                                \'time_of_travel\':form_search_cab.vars.time_of_travel}))\n        \n    return locals()\n@auth.requires_login()\ndef search_cab_details():\n    source_pt=request.vars.source_pt\n    destination_pt=request.vars.destination_pt\n    seats_required=int(request.vars.seats_required)\n    date_of_travel=request.vars.date_of_travel\n    time_of_travel=request.vars.time_of_travel\n    rows=db(db.share_cab_details).select()\n    cab_list=[]\n    for row in rows:\n        c=list(row.path_btw)\n        if date_of_travel==str(row.date_of_travel):\n            if seats_required<=row.seats_available:\n                if source_pt in c and destination_pt in c:\n                    if c.index(source_pt) < c.index(destination_pt):\n                        cab_list.append(row)\n                    else:\n                        print \'False\'\n    return locals()\n\n\n@auth.requires_login()\ndef book_cab():\n    travel_id=request.vars.travel_id\n    source_pt=request.vars.source_pt\n    destination_pt=request.vars.destination_pt\n    seats_required=request.vars.seats_required\n    date_of_travel=request.vars.date_of_travel\n    time_of_travel=request.vars.time_of_travel\n    user_id=auth.user.email\n    id1=db.shared_cab_details.insert(user_id=user_id,\n                                        travel_id=travel_id,\n                                        source_pt=source_pt,\n                                        destination_pt=destination_pt,\n                                        seats_booked=seats_required,\n                                        date_of_travel=date_of_travel,\n                                        time_of_travel=time_of_travel\n                                        )\n    seats_remaining=int(request.vars.seats_available) - int(seats_required)\n    row = db(db.share_cab_details.id==int(travel_id)).select().first()\n    row.update_record(seats_available=seats_remaining)\n    \n    return locals()\n\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(search_cab_details)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/calvin/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/calvin/web2py/applications/GetMeRide/controllers/default.py", line 188, in <module>\n  File "/home/calvin/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/calvin/web2py/gluon/tools.py", line 3774, in f\n    return action(*a, **b)\n  File "/home/calvin/web2py/applications/GetMeRide/controllers/default.py", line 97, in search_cab_details\n    seats_required=int(request.vars.seats_required)\nTypeError: int() argument must be a string or a number, not \'NoneType\'\n'
p11
s.